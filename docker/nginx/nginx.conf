daemon off;
# We generally run on c3.large, which has 2 virtual CPUs.
worker_processes 2;
worker_rlimit_nofile 32000;

error_log /dev/stdout warn;

events {
  # See http://wiki.nginx.org/EventsModule#worker_connections
  # Our goal is that each server can process 8000 concurrent
  # firehose connections.
  worker_connections  8000;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # nginx default "combined" log format, plus Proxy Protocol Address so we can log the
  # client's real IP address. Removing $remote_user because we don't use it.
  log_format combined_plus_x_forwarded_for '$remote_addr $proxy_protocol_addr - [$time_local] '
                                           '"$request" $status $body_bytes_sent '
                                           '"$http_referer" "$http_user_agent"';

  access_log /dev/stdout combined_plus_x_forwarded_for;
  server_names_hash_bucket_size 64;
  keepalive_timeout 65;

  gzip on;

  upstream elixir {
    server 172.17.42.1:7474;
  }

  # Consumed by DataDog Agent.
  server {
    listen 1080;
    # TODO: Limit this to requests from this machine (or the datadog container).
    #       `allow 127.0.0.1` doesn't work because the container doesn't see
    #       requests from the container or other hosts as local.
    #       `allow 172.16/12` might work. But it is also probably too open.
    #       For now we are relying on AWS security groups to block port 1080.
    location /status {
      stub_status on;
      access_log off;
      allow 127.0.0.1;
      allow 172.17.42.1;
      allow 10.54.81.96/27;
      allow 10.54.94.192/26;
      deny all;
    }
  }

  server {
    listen 81 proxy_protocol;
    server_name firehose.polleverywhere.com;

    location / {

      limit_except GET HEAD OPTIONS {
        auth_basic "Firehose Publishing";
        auth_basic_user_file /etc/nginx/htpasswd;
      }

      # See this for info on reverse proxying secure WebSockets (WSS)
      #   http://metacogni.tv/blog/2013/02/19/websockets-with-nginx-plus-ssl-also/
      #   http://nginx.org/en/docs/http/websocket.html
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      proxy_buffering off;

      proxy_set_header X-Request-Start "t=${msec}";
      proxy_set_header X-Real-IP $proxy_protocol_addr;
      proxy_set_header X-Forwarded-For $proxy_protocol_addr;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_next_upstream off;

      proxy_pass http://elixir;
      break;
    }
  }

  # Separate endpoint without the proxy protocol for internal healthchecks.
  server {
    listen 80;
    server_name firehose.polleverywhere.com;

    location /healthcheck {
      limit_except GET {
        deny all;
      }

      proxy_set_header X-Request-Start "t=${msec}";
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_next_upstream off;

      proxy_pass http://elixir;
      break;
    }
  }
}
